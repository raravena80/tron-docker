// Generated by CoffeeScript 1.9.3
(function() {
  var CommandIndexEntry, ConfigIndexEntry, IndexEntry, JobIndexEntry, ServiceIndexEntry, backboneSync, module,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  window.modules = window.modules || {};

  module = window.modules.models = {};

  backboneSync = Backbone.sync;

  Backbone.sync = function(method, model, options) {
    options.url = '/api' + _.result(model, 'url');
    return backboneSync(method, model, options);
  };

  window.RefreshModel = (function(superClass) {
    extend(RefreshModel, superClass);

    function RefreshModel() {
      this.scheduleRefresh = bind(this.scheduleRefresh, this);
      this.doRefresh = bind(this.doRefresh, this);
      this.clear = bind(this.clear, this);
      this.disableRefresh = bind(this.disableRefresh, this);
      this.enableRefresh = bind(this.enableRefresh, this);
      this.toggle = bind(this.toggle, this);
      this.initialize = bind(this.initialize, this);
      return RefreshModel.__super__.constructor.apply(this, arguments);
    }

    RefreshModel.prototype.initialize = function(options) {
      options = options || {};
      this.interval = (options.interval || 5) * 1000;
      this.enabled = false;
      return this.timeout = null;
    };

    RefreshModel.prototype.toggle = function(event) {
      if (!this.enabled) {
        this.enableRefresh();
        return this.trigger('toggle:on');
      } else {
        this.disableRefresh();
        return this.trigger('toggle:off');
      }
    };

    RefreshModel.prototype.enableRefresh = function() {
      if (!this.enabled) {
        console.log("Enabling refresh");
        this.enabled = true;
        return this.scheduleRefresh();
      }
    };

    RefreshModel.prototype.disableRefresh = function() {
      console.log("Disableing refresh ");
      this.enabled = false;
      return this.clear();
    };

    RefreshModel.prototype.clear = function() {
      clearTimeout(this.timeout);
      return this.timeout = null;
    };

    RefreshModel.prototype.doRefresh = function() {
      this.clear();
      if (this.enabled) {
        console.log("trigger refresh event");
        this.trigger('refresh');
        return this.scheduleRefresh();
      }
    };

    RefreshModel.prototype.scheduleRefresh = function() {
      if (!this.timeout) {
        console.log("scheduled with " + this.interval);
        return this.timeout = setTimeout(this.doRefresh, this.interval);
      }
    };

    return RefreshModel;

  })(Backbone.Model);

  window.matchAny = function(item, query) {
    return ~item.toLowerCase().indexOf(query.toLowerCase());
  };

  window.buildMatcher = function(getter, matcher) {
    return function(item, query) {
      return matcher(getter(item), query);
    };
  };

  window.fieldGetter = function(name) {
    return function(item) {
      return item.get(name);
    };
  };

  window.nestedName = function(field) {
    return function(item) {
      return item.get(field)['name'];
    };
  };

  window.FilterModel = (function(superClass) {
    extend(FilterModel, superClass);

    function FilterModel() {
      this.createFilter = bind(this.createFilter, this);
      return FilterModel.__super__.constructor.apply(this, arguments);
    }

    FilterModel.prototype.filterTypes = {
      name: buildMatcher(fieldGetter('name'), matchAny),
      state: buildMatcher(fieldGetter('state'), _.str.startsWith),
      node_pool: buildMatcher(nestedName('node_pool'), _.str.startsWith)
    };

    FilterModel.prototype.createFilter = function() {
      var filterFuncs, func, type;
      filterFuncs = (function() {
        var ref, results;
        ref = this.filterTypes;
        results = [];
        for (type in ref) {
          func = ref[type];
          results.push((function(_this) {
            return function(type, func) {
              var query;
              query = _this.get(type + "Filter");
              if (query) {
                return function(item) {
                  return func(item, query);
                };
              } else {
                return function(item) {
                  return true;
                };
              }
            };
          })(this)(type, func));
        }
        return results;
      }).call(this);
      return function(item) {
        return _.every(filterFuncs, function(func) {
          return func(item);
        });
      };
    };

    return FilterModel;

  })(Backbone.Model);

  IndexEntry = (function() {
    function IndexEntry(name1) {
      this.name = name1;
      this.toString = bind(this.toString, this);
      this.indexOf = bind(this.indexOf, this);
      this.replace = bind(this.replace, this);
      this.toLowerCase = bind(this.toLowerCase, this);
    }

    IndexEntry.prototype.toLowerCase = function() {
      return this.name.toLowerCase();
    };

    IndexEntry.prototype.replace = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.name).replace.apply(ref, args);
    };

    IndexEntry.prototype.indexOf = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.name).indexOf.apply(ref, args);
    };

    IndexEntry.prototype.toString = function() {
      return this.type + " " + this.name;
    };

    return IndexEntry;

  })();

  JobIndexEntry = (function(superClass) {
    extend(JobIndexEntry, superClass);

    function JobIndexEntry() {
      this.getUrl = bind(this.getUrl, this);
      return JobIndexEntry.__super__.constructor.apply(this, arguments);
    }

    JobIndexEntry.prototype.type = "Job";

    JobIndexEntry.prototype.getUrl = function() {
      return "#job/" + this.name;
    };

    return JobIndexEntry;

  })(IndexEntry);

  ServiceIndexEntry = (function(superClass) {
    extend(ServiceIndexEntry, superClass);

    function ServiceIndexEntry() {
      this.getUrl = bind(this.getUrl, this);
      return ServiceIndexEntry.__super__.constructor.apply(this, arguments);
    }

    ServiceIndexEntry.prototype.type = "Service";

    ServiceIndexEntry.prototype.getUrl = function() {
      return "#service/" + this.name;
    };

    return ServiceIndexEntry;

  })(IndexEntry);

  ConfigIndexEntry = (function(superClass) {
    extend(ConfigIndexEntry, superClass);

    function ConfigIndexEntry() {
      this.getUrl = bind(this.getUrl, this);
      return ConfigIndexEntry.__super__.constructor.apply(this, arguments);
    }

    ConfigIndexEntry.prototype.type = "Config";

    ConfigIndexEntry.prototype.getUrl = function() {
      return "#config/" + this.name;
    };

    return ConfigIndexEntry;

  })(IndexEntry);

  CommandIndexEntry = (function(superClass) {
    extend(CommandIndexEntry, superClass);

    function CommandIndexEntry(name1, job_name, action_name) {
      this.name = name1;
      this.job_name = job_name;
      this.action_name = action_name;
      this.getUrl = bind(this.getUrl, this);
    }

    CommandIndexEntry.prototype.type = "command";

    CommandIndexEntry.prototype.getUrl = function() {
      return "#job/" + this.job_name + "/-1/" + this.action_name;
    };

    return CommandIndexEntry;

  })(IndexEntry);

  module.QuickFindModel = (function(superClass) {
    extend(QuickFindModel, superClass);

    function QuickFindModel() {
      this.parse = bind(this.parse, this);
      this.getJobEntries = bind(this.getJobEntries, this);
      return QuickFindModel.__super__.constructor.apply(this, arguments);
    }

    QuickFindModel.prototype.url = "/";

    QuickFindModel.prototype.getJobEntries = function(jobs) {
      var actions, buildActions, name, nested;
      buildActions = function(actions) {
        var action, i, len, results;
        results = [];
        for (i = 0, len = actions.length; i < len; i++) {
          action = actions[i];
          results.push(new CommandIndexEntry(action.command, name, action.name));
        }
        return results;
      };
      nested = (function() {
        var results;
        results = [];
        for (name in jobs) {
          actions = jobs[name];
          results.push([new JobIndexEntry(name), buildActions(actions)]);
        }
        return results;
      })();
      return _.flatten(nested);
    };

    QuickFindModel.prototype.parse = function(resp, options) {
      var entry, index, name;
      index = [].concat(this.getJobEntries(resp['jobs']), (function() {
        var i, len, ref, results;
        ref = resp['services'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          results.push(new ServiceIndexEntry(name));
        }
        return results;
      })(), (function() {
        var i, len, ref, results;
        ref = resp['namespaces'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          results.push(new ConfigIndexEntry(name));
        }
        return results;
      })());
      return _.mash((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = index.length; i < len; i++) {
          entry = index[i];
          results.push([entry.name, entry]);
        }
        return results;
      })());
    };

    return QuickFindModel;

  })(Backbone.Model);

}).call(this);
